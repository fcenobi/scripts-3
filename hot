#!/bin/bash

UP="up"
DOWN="down"
WIRELESS_0=wlan0
WIRELESS=$WIRELESS_0
WIRED_0=eth0
WIRED=$WIRED_0

print_usage() {
	cat - <<-EOF
hot [spot|lan] [up|down] [<interface>]
	defaults are "lan up eth0"
	eg: hot . down == hot lan down eth0
	EOF
}

am_root(){
	if [[ `whoami` != 'root' ]] ;then
		echo 'Must be root to execute!'
		exit 1
	fi
}

iptables_rules_up(){
    lan=$1
	inet=$2
	/sbin/iptables -t nat -A POSTROUTING -o $lan -j MASQUERADE || return 1
	/sbin/iptables -A FORWARD -i $lan -o $inet -j ACCEPT || return 1
	return 0
}

iptables_rules_down(){
	lan=$1
	inet=$2
	/sbin/iptables -t nat -D POSTROUTING -o $lan -j MASQUERADE || return 1
    /sbin/iptables -D FORWARD -i $lan -o $inet -j ACCEPT || return 1
	return 0
}

_forwarding(){
	dir=$1
	if [[ $dir == $UP ]] ;then
		val=1
	else
		val=0
	fi

	# ensure ipv4 forwarding set
	sysctl net.ipv4.ip_forward=$val || return 1
	# ensure ipv6 forwarding set
	sysctl -w net.ipv6.conf.all.forwarding=$val || return 1

	return 0
}

_iface(){
	lan=$1
	ipaddr=$2
	dir=$3
	if [[ $dir == $UP ]]
	    direction_msg='restoring interface'
    	ifacecmd="ifconfig $lan up"
	else
		direction_msg='putting interfaces down ...'
		ifacecmd="ifconfig $lan down"
	fi

	echo $direction_msg
	if $ifacecmd ;then
		echo 'they is down now'
	else
		echo 'fail'
		return 1
	fi
	if [[ $dir == $UP ]] ;then
	    echo -n 'setting server address ...'
    	if ifconfig $lan $ipaddr ;then
	        echo 'success'
    	else
	        echo 'fail'
    	    return 1
	    fi
	fi
	return 0
}

_dnsmasq(){
	lan=$1
	dhcp_start=$2
	dhcp_end=$3
	lease_time=$4
	dir=$5
	if [[ $dir == $UP ]] ;then
		direction_msg='running dnsmasq ...'
		dnsmasqcmd="dnsmasq --interface=$lan --dhcp-range=\"$dhcp_start,$dhcp_end,$lease_time\""
	else
		direction_msg='running dnsmasq ...'
		dnsmasqcmd="killall dnsmasq"
	fi
	echo -n $dnsmasq_msg
	if $dnsmasqcmd ;then
		echo 'success'
	else
		echo 'fail'
		return 1
	fi
	return 0
}

_iptables(){
	lan=$1
	inet=$2
	dir=$3
	if [[ $dir == $UP ]] ;then
		iptables_msg='loading iptables rules ...'
		iptablescmd="iptables_rules_up $lan $inet"
	else
		iptables_msg='removing iptables rules ...'
		iptablescmd="iptables_rules_down $lan $inet"
	fi
	echo -n $iptables_msg
	if $iptablescmd ;then
		echo 'success'
	else
		echo 'fail'
		return 1
	fi
}

hot(){
	lan=$1
	inet=$2
	ipaddr=$3
	dhcp_start=$4
    dhcp_end=$5
    lease_time=$6
	dir=$7
	_forwarding $dir
	_iface $lan $ipaddr $dir
	_dnsmasq $lan $dhcp_start $dhcp_end $lease_time $dir
	_iptables_rules_down $if $inet $dir
}

#defaults
lan=$WIRED_0
inet=$WIRELESS_0
dhcp_start=192.168.35.100
dhcp_end=192.168.35.200
lease_time=3600
direction=$UP

# handle args
index=0
while ((index<$*)); do
	arg=${@[$index]}
	nextpos=${@:$(($index+1)):1}
	case "$arg" in
		"-h"|"--help")
			print_usage
			;;
		"-i")
			lan=$nextpos
			;;
		"-o")
			inet=$nextpos
			;;
		"-u"|"up")
			direction=$UP
			;;
		"-d"|"down")
			direction=$DOWN
			;;
		"lan")
			lan=$WIRED
			inet=$WIRELESS
			;;
		"spot")
			lan=$WIRELESS
			inet=$WIRED
			;;
		*)
			;;
	esac
done

hot $lan $inet $direction
