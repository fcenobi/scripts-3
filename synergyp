#!/bin/bash
# A mechanism to pass arbitrary condiments
#  and launch synergys with different configs
# Copyright (c) 2015 haxwithaxe
# License: GPLv3
#
# Link this to synergyps for server or synergypc for client

set -e

synergys=/usr/bin/synergys
config_dir=$HOME/.config/synergy
default_profile=default
this_script=$(basename $0)
synergy=synergys
client=

DEBUG=/dev/null

if ! [ -d $config_dir ] ;then
	mkdir -p $config_dir
fi

usage(){
	cat - >&2 <<EOM
$(basename $0) [-p|--profile <profile>] [-d|--default <profile>] [-c|--config <config file>] [-h|--help]
EOM
}

set_profile(){
	echo Creating profile: $profile
	mv $config $config_dir/${profile}.conf
}

set_default(){
	echo Set default profile to: $profile
	ln -sf $config_dir/${profile}.conf $default_profile
}

kill_synergy(){
	(killall $synergy || killall -9 $synergy || echo $synergy was not running) 2>/dev/null
}

kill_client(){
	ssh $client -- "killall synergyc || killall -9 synergyc || echo synergyc was not running on $client" 2>/dev/null || echo "Could not connect to $client"
}

use_profile(){
	kill_synergy > $DEBUG
	$synergy -c $config_dir/${profile}.conf > $DEBUG && echo "synergys is running with profile \"$profile\""
	start_client
}

use_default(){
	profile=$default_profile
	use_profile
}

list_profiles(){
	for p in $(ls $config_dir/*.conf); do
		echo $(basename $p .conf)
	done
}

validate_profile(){
	if [ ! -f "$config_dir/${profile}.conf" ]; then
		if [ -f "$config_dir/aliases" ]; then
			for re in $(cat "$config_dir/aliases"); do
				match=$(awk "$(cut -d'=' -f2- <<< $re) {print \$0}" <<< $profile)
				if [[ "$match" != "" ]]; then
					client=$profile
					profile=$(cut -d'=' -f1 <<< $re)
					validate_profile
					return 0
				fi
			done
		fi
		echo "ERROR: "${profile}" is not an existing profile." 1>&2
		usage
		exit 1
	fi
}

validate_default(){
	if [ "$default" != "default" ] && [ ! -f $config_dir/${default}.conf ] ;then
		echo -e "ERROR: The default profile is not set.\nuse: $(basename $0) --default <existing profile name> or $(basename $0) --default --config <config file>" >&2
		usage
		exit 1
	fi
}

validate_config(){
	if ! [ -f $config ]; then
		echo "ERROR: \"${config}\" is not a file." >&2
		usage
		exit 1
	fi
}

stop_all(){
	kill_synergy
	kill_client
}

start_client(){
	server_ip=$(ip addr show | awk '/inet .* global/ { split($2, a,"/"); print a[1] }')
	if [ -z "$client" ]; then
		client=$profile
	fi
	if [ -n $server_ip ]; then
		kill_client > $DEBUG
		stderr=$(ssh $client -- "synergyc --display :0.0 $server_ip" 3>&1 2>&3 1>/dev/null)
		if [[ $? -ne 0 ]]; then
			echo $stderr
		else
			echo "synergyc is running on $client"
		fi
	else
		echo "Couldn\'t determine the IP address of this machine." >&2
		exit 1
	fi
}


while getopts ":-:p:d:c:lkh" opt; do
	case "$opt" in
		-)
			case "$OPTARG" in
				profile)
					profile="${!OPTIND}"
					[[ "$profile" == "" ]] && usage && false
					OPTIND=$(( $OPTIND + 1 )) 
					;;
				default)
					default="${!OPTIND}"
					[[ "$default" == "" ]] && usage && false
					case "$default" in
						--config)
							default=default
							;;
						-c)
							default=default
							;;
						*)
							OPTIND=$(( $OPTIND + 1 ))
							;;
					esac
					;;
				config)
					config="${!OPTIND}"
					OPTIND=$(( $OPTIND + 1 ))
					;;
				help)
					usage
					exit 1
					;;
				host)
					client="${!OPTIND}"
					OPTIND=$(( $OPTIND + 1 ))
					;;
				*)
					synergy_args="$synergy_args --$OPTARG ${!OPTIND}"
					;;
			esac
			;;
		p)
			[[ "$OPTARG" == "" ]] && usage && false
			profile=$OPTARG
			;;
		d)
			[[ "$OPTARG" == "" ]] && usage && false
			default=$OPTARG
            ;;
		c)
			[[ "$OPTARG" == "" ]] && usage && false
			config=$OPTARG
            ;;
		l)
			list_profiles
			exit 0
			;;
		h)
			usage
			exit 1
            ;;
		k)
			stop_all=true
			;;
		*)
			synergy_args="${synergy_args} $OPTARG"
			;;
	esac
done

if [ -n "$config" ]; then
	validate_config
fi

if [ -n "$default" ]; then
	validate_default
	if [ "$default" = "default" ] && [ -n "$config" ]; then
		profile=$default
		set_profile
	else
		profile=$default
		set_default
	fi
elif [ -n "$profile" ]; then
	validate_profile
	if [ -n "$config" ]; then
		set_profile
	elif [ $stop_all ]; then
		kill_synergy
		kill_client
	else
		use_profile
	fi
elif [ -n "$config" ]; then
	profile=tmp
	set_profile
	use_profile
	sleep 5
	rm $config_dir/tmp.conf
else
	use_default
fi
